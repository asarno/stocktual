{"version":3,"sources":["hooks/useWindowSize.js","components/Title.js","components/styled/MainContainer.js","components/styled/TextContainer.js","components/styled/Text.js","components/Button.js","App.js","serviceWorker.js","index.js","assets/paint.png"],"names":["useWindowSize","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Container","styled","div","Main","span","Secondary","opacity","Title","currentPosition","style","position","top","alt","src","require","MainContainer","TextContainer","Text","size","a","Button","onClick","App","y","useWindowScrollPosition","maxWidth","left","location","replace","bottom","right","color","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yOAEO,SAASA,IAAgB,MAGMC,mBAAS,CAC3CC,WAAOC,EACPC,YAAQD,IALoB,mBAGvBE,EAHuB,KAGXC,EAHW,KA4B9B,OApBAC,qBAAU,WAER,SAASC,IAEPF,EAAc,CACZJ,MAAOO,OAAOC,WACdN,OAAQK,OAAOE,cAWnB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,IAGO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAEIH,E,4qBC1BT,IAAMS,EAAYC,IAAOC,IAAV,KAOTC,EAAOF,IAAOG,KAAV,KAIO,qBAAGhB,MAAoB,IAAM,OAAS,UAUjDiB,EAAYJ,IAAOG,KAAV,KAMA,qBAAGE,WAgBHC,EAbD,SAAC,GAAwB,EAAtBC,gBAAuB,IAC5BpB,EAAUF,IAAVE,MAGR,OACI,kBAACY,EAAD,CAAWZ,MAAOA,GACd,kBAACe,EAAD,CAAMf,MAAOA,GAAb,YAA6B,yBAAKqB,MAAO,CAAErB,MAAO,MAAOsB,SAAU,WAAYC,IAAK,UAAYC,IAAI,SAASC,IAAKC,EAAQ,MAC1H,kBAACT,EAAD,CAAWC,QALH,GAKR,+B,0NCvCZ,IASeS,EATOd,IAAOC,IAAV,K,mQCAnB,IAWec,EAXOf,IAAOC,IAAV,KAQN,qBAAGd,MAAoB,IAAM,OAAS,U,sOCRnD,IAUe6B,EAVFhB,IAAOG,KAAV,KAMO,qBAAGc,MAAmB,UACxB,qBAAGZ,SAAyB,K,+WCN3C,IAAMN,EAAYC,IAAOkB,EAAV,KAOA,qBAAGb,WAoBHc,EAVA,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASf,EAAqB,EAArBA,QAASG,EAAY,EAAZA,MAEhC,OACI,kBAAC,EAAD,CAAWA,MAAOA,EAAOH,QAASA,EAASe,QAASA,GAApD,Y,gBC+BOC,MAxCf,WAAgB,IACNC,EAAMC,MAAND,EACAnC,EAAUF,IAAVE,MACFoB,EAAkBe,EAIxB,OACE,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAenC,MAAOA,GAEpB,kBAAC,EAAD,CAAOoB,gBAAiBA,IAExB,kBAAC,EAAD,CACEF,QAAS,EACTG,MAAO,CACLgB,SAAU,SAHd,+KASA,kBAAC,EAAD,CACEnB,QAAS,GADX,kBAMA,kBAAC,EAAD,CAAQG,MAAO,CAAEC,SAAU,WAAYgB,KAAM,QAAUpB,QAAS,EAAGe,QAAS,kBAAM1B,OAAOgC,SAASC,QAAQ,oEAG1G,yBAAKnB,MAAO,CAAErB,MAAO,OAAQsB,SAAU,WAAYmB,OAAQ,OAAQC,MAAO,QAAUlB,IAAI,SAASC,IAAKC,EAAQ,KAGlH,0BAAML,MAAO,CAAEC,SAAU,WAAYmB,OAAQ,OAAQE,MAAO,cAA5D,2BCpCcC,QACW,cAA7BrC,OAAOgC,SAASM,UAEe,UAA7BtC,OAAOgC,SAASM,UAEhBtC,OAAOgC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.0f7ccba7.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    \n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    \n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    \n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}","import React from 'react';\nimport styled from '@emotion/styled';\nimport { useWindowSize } from '../hooks/useWindowSize';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-start;\n`;\n\nconst Main = styled.span`\n    overflow: hidden;\n    padding: 1rem;\n    padding-bottom: 0px;\n    font-size: ${({ width }) => width > 750 ? '5rem' : '3rem'};\n    cursor: pointer;\n    transition: all .2s ease-in-out;\n    font-weight: 400;\n\n    &:hover {\n        transform: scale(1.1);\n    }\n`;\n\nconst Secondary = styled.span`\n    overflow: hidden;\n    padding: 1rem;\n    padding-top: 0px;\n    font-size: 2rem;\n    cursor: pointer;\n    opacity: ${({ opacity }) => opacity};\n`;\n\nconst Title = ({ currentPosition }) => {\n    const { width } = useWindowSize();\n    const opacity = 1;\n\n    return (\n        <Container width={width}>\n            <Main width={width}>STOCKTUAL<img style={{ width: '5vw', position: 'relative', top: '1.5rem' }} alt=\"period\" src={require('../assets/paint.png')} /></Main>\n            <Secondary opacity={opacity}>/Staak-CHo͞oəl/</Secondary>\n        </Container>\n    )\n}\n\n\nexport default Title;","import styled from '@emotion/styled';\n\nconst MainContainer = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #FDFDF0;\n`;\n\nexport default MainContainer;","import styled from '@emotion/styled';\n\nconst TextContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    padding: 1rem;\n    position: absolute;\n    top: 10vh;\n    width: ${({ width }) => width > 450 ? '70vw' : '90vw'};;\n`;\n\nexport default TextContainer;","import styled from '@emotion/styled';\n\nconst Text = styled.span`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n    padding: 1rem;\n    font-size: ${({ size }) => size || '1rem'};\n    opacity: ${({ opacity }) => opacity || 0};\n`;\n\nexport default Text;","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Container = styled.a`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem;\n    border: 1px solid;\n    width: 10vw;\n    opacity: ${({ opacity }) => opacity};\n    margin-top: 3rem;\n    cursor: pointer;\n    transition: all .2s ease-in-out;\n\n    &:hover {\n        transform: scale(1.1);\n    }\n`;\n\nconst Button = ({ onClick, opacity, style }) => {\n\n    return (\n        <Container style={style} opacity={opacity} onClick={onClick}>\n            Contact\n        </Container>\n    );\n\n}\n\nexport default Button;","import React from 'react';\nimport Title from './components/Title';\n\nimport {\n  MainContainer,\n  TextContainer,\n  Text,\n} from './components/styled';\n\nimport Button from './components/Button';\n\nimport { useWindowSize } from './hooks/useWindowSize';\nimport useWindowScrollPosition from \"@rehooks/window-scroll-position\";\n\nfunction App() {\n  const { y } = useWindowScrollPosition();\n  const { width } = useWindowSize();\n  const currentPosition = y;\n\n  // const [isContact, setIsContact] = useState(false);\n\n  return (\n    <MainContainer>\n        <TextContainer width={width}>\n\n          <Title currentPosition={currentPosition} />\n\n          <Text\n            opacity={1}\n            style={{\n              maxWidth: '30vw',\n            }}\n          >\n            (adjective): a word used to describe a commercial that pairs premium, high quality, existing stock footage with clever, biting, comedic writing, voice acting, and editing.\n          </Text>\n\n          <Text\n            opacity={1}\n          >\n            (noun): ...us.\n          </Text>\n\n          <Button style={{ position: 'relative', left: '1rem' }} opacity={1} onClick={() => window.location.replace(\"mailto:austin.kolodney@gmail.com?subject=Stocktual%20Inquiry\")} />\n      \n        </TextContainer>\n          <img style={{ width: '10vw', position: 'absolute', bottom: '5rem', right: '5rem' }} alt=\"period\" src={require('./assets/paint.png')} />\n      {/* {isContact && <Contact />} */}\n\n      <span style={{ position: 'absolute', bottom: '1rem', color: '#0f17475e'}}>website in progress..</span>\n\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/paint.9709aac9.png\";"],"sourceRoot":""}